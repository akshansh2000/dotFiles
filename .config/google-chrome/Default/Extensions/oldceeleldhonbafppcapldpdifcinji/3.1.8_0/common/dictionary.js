/*! (C) Copyright 2020 LanguageTooler GmbH. All rights reserved. */
class Dictionary{static _update(t){return this._storageController.updateSettings({dictionary:t})}static init(t,r=[]){this._isInitialized||(this._storageController=t||StorageController.create(),this._defaultWords=r,this._isInitialized=!0)}static get(){let t=this._storageController.getSettings().dictionary||[];return Array.isArray(t)||(t=[]),t=t.concat(this._defaultWords),t=uniq(t)}static getSorted(){return this.get().sort((t,r)=>t.toLowerCase().localeCompare(r.toLowerCase()))}static add(t){const r=this.get();return r.push(t.trim()),EnvironmentAdapter.addWordToDictionary(t),this._update(r)}static addBatch(t){const r=this.get();return t.forEach(t=>{t&&t.trim()&&!t.trim().match(/\s/)&&r.push(t.trim())}),EnvironmentAdapter.addWordsToDictionary(t),this._update(r)}static remove(t){const r=this.get(),i=r.indexOf(t);return-1===i?Promise.resolve():(r.splice(i,1),EnvironmentAdapter.removeWordFromDictionary(t),this._update(r))}static clear(){return EnvironmentAdapter.clearDictionary(),this._update([])}}Dictionary._isInitialized=!1;